/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Fun)
package parser;
import java.io.*;
import recovery.*;
import syntaticTree.*;		

public class Fun {
  final static String Version ="X++ Compiler - version 1.0 - 2018\n";
  int contParseError = 0;
  boolean debug_recovery;
  
  public static void main(String args []) throws ParseException {
    boolean debug_as = false;
    boolean debug_recovery = false;
    
	String filename ="";
    Fun parser;
    int i;
    boolean ms = false;
    
	System.out.println(Version);
	// le os parametros passados para o compilador
	for (i = 0; i<args.length - 1; i++)
	{
	  if (args[i].equals("-debug_AS")) 
	  	debug_as = true;
	  else
	  if (args[i].equals("-debug_recovery"))
	    debug_recovery = true;
	  else
	  {
	    System.out.println("Usage is: java Fun [-debug_AS] " + "[-debug_recovery] inputfile");
	    System.exit(0);
	  }
	}
	  
	
	if(args[i].equals("-")) {
	  // le a entrada - padrao
	  System.out.println("Reading standart input...");
	  parser = new Fun(System.in);
	}
	else {
	  // le do arquivo
	  filename = args[args.length-1];
	  System.out.println("Reading from file " + filename + "...");
	  try {
	    parser = new Fun(new java.io.FileInputStream(filename));
	  }
	  catch (java.io.FileNotFoundException e) {
	    System.out.println("File " + filename + " not found.");
	    return;
	  }
	}
	

	parser.debug_recovery = debug_recovery;
	if (!debug_as) parser.disable_tracing(); // desab verbose do AS
	try {
		parser.program(); //chama o metodo que faz a analise
	}
	catch (ParseEOFException e) {
	  System.err.println(e.getMessage());
	}
	finally {
	   System.out.println(parser.token_source.foundLexError() + "Lexical errors found");
	   System.out.println(parser.contParseError + " Syntatic errors found");
	 }

	// verifica se houve erro lexico
	if (parser.token_source.foundLexError() != 0) {
	  System.out.println(parser.token_source.foundLexError() + " lexical errors found");
	}
	else {
	  System.out.println("Program successfully analized");
	} 
} // main

static public String im (int x)
{
	int k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try { s = s.substring(1,k); }
    catch (StringIndexOutOfBoundsException e)
    { }
    return s;
}

boolean eof; // variavel que indica se EOF foi alcancado

// o metodo abaixo consome tokens ate alcancar um que pertenca ao conjunto de sincronizacao
void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException
{
  	Token tok;
	if (debug_recovery) {
	  System.out.println();
	  System.out.println("*** " + met + " ***");
	  System.out.println("   Syncronizing Set: " + g);
	}
	if (g==null) throw e; // se o conjunto eh null, propaga a execao
	tok = getToken(1); // pega token corrente
	
	while (!eof) {
	  if (g.contains(tok.kind)) {
	    if (debug_recovery) 
	    	System.out.println("Found syncronizing token: " + im(tok.kind));
	    break;
	  }
	  if(debug_recovery) 
	  	System.out.println("Ignoring token: " + im(tok.kind));
	  getNextToken(); //pega prox token
	  tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) ) //fim da entrada
	  	eof = true;
	  }
	System.out.println(e.getMessage());
	contParseError++; // incremento o numero de erros
	if ( eof ) throw new ParseEOFException("EOF found prematurely.");
}
	
} // Fun  

PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
  int countLexError = 0;

  public int foundLexError() {
    return countLexError;
  }
}


SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

TOKEN : /* Palavra$ reservadas */
{
 < BREAK: "break">
| < CLASS: "class">
| < CONSTRUCTOR: "constructor">
| < ELSE: "else" >
| < EXTENDS: "extends">
| < FOR: "for" >
| < IF: "if" >
| < INT: "int" >
| < NEW: "new" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < STRING: "string" >
| < SUPER: "super" >
| < FLOAT: "float" >
| < CHAR: "char" >
| < BOOLEAN: "boolean" >

}

TOKEN : /* Operadore$ */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < REM: "%" >
| < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NEQ: "!=" >
| < NOT: "not" >
| < AND: "and" >
| < XOR: "xor" >
| < OR: "or" >

}

TOKEN : /* $imbolos especiais */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* Contante$ */
{
	< int_constant:( // numeros decimais, octais, hexa ou binarios
		(["0"-"9"] (["0"-"9"])* ) |
		(["0"-"7"] (["0"-"7"])* ["o", "O"]) |
		(["0"-"9"] (["0"-"7","A"-"F", "a"-"f"])* ["h", "H"]) |
		(["0"-"1"] (["0"-"1"])* ["b", "B"])
		) >
|
	< string_constant: //qlqr constante string 
	"\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    | "\\" [ "n", "t", "r", "\\", "\"" ]
    )*
    "\"" >
|
	< char_constant:
	"\'"
    (
      (~["\\", "\n", "\r", "\'" ])
    | "\\" [ "n", "t", "r", "\\", "\"", "\'" ]
    )
    "\'" >
|
	< float_constant:( // numeros de ponto flutuante
	(["-"])? (["0"-"9"])+ ["."] (["0"-"9"])+
	) >
|	
	< boolean_constant: "true" | "false" > // constante boolean
|
	< null_constant: "null" > // constante nula


}

TOKEN: /* identificadore$ */
{
  < IDENT: < LETTER > (< LETTER >|< DIGIT >)* >
| 
  < #LETTER:["A"-"Z","a"-"z"] >
|
  < #DIGIT:["0"-"9"] >

}


SKIP:
{
  "/*": multilinecomment
}
<multilinecomment> SKIP:
{
 	 "*/": DEFAULT
	|  <~[]>
}


SKIP:
{
  "//": singlelinecommnet
}
<singlelinecommnet> SKIP:
{
  < ["\n","\r"] >: DEFAULT
|  <~[]>
}

SPECIAL_TOKEN:
{
< INVALID_LEXICAL:
(~ ["a"-"z", "A"-"Z",
	"0"-"9",
	"\"",
	"\'",
	"(",
	")",
	"[",
	"]",
	"{",
	"}",
	";",
	",",
	".",
	"=",
	">",
	"<",
	"!",
	"+",
	"-",
	"*",
	"/",
	"%",
	" ",
	"\t",
	"\n",
	"\r",
	"\f"
])+>
	{
	  System.err.println("Line " + input_stream.getEndLine() + " - Invalid string found: " + image);
	  countLexError++;
	}
|
	< INVALID_CHAR_CONST:
	"\'"
    (
      (~[ "\'", "\\", "\n", "\r" ])
    | "\\" [ "n", "t", "r", "\\", "\'" ]
    )*
     ["\n","\r"] >
	{
	  System.err.println("Line " + input_stream.getEndLine() + " - Char constant has a : " + image);
	  countLexError++;
	}
|
	< INVALID_STRING_CONST:
	"\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    | "\\" [ "n", "t", "r", "\\", "\"" ]
    )*
     ["\n","\r"] >
	{
	  System.err.println("Line " + input_stream.getEndLine() + " - String constant has a : " + image);
	  countLexError++;
	}

}


void paramlist(RecoverySet g) throws ParseEOFException :
{
}
{
  try {
    [
    	( < INT > | < STRING > | < CHAR > | < BOOLEAN > | < FLOAT > | < IDENT >) < IDENT > (< LBRACKET > < RBRACKET >)*
    	( < COMMA > (< INT > | < STRING > | < CHAR > | < BOOLEAN > | < FLOAT > | < IDENT >) < IDENT >
    	( < LBRACKET > <RBRACKET > )*
   		)*
   	]
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "paramlist");
  }
}

/* paramlist antigo:
 [
		(< INT > | < STRING > | < CHAR > | < BOOLEAN > | < FLOAT > | < IDENT >) < IDENT >
		(< LBRACKET > < RBRACKET >)* [< ASSIGN > (alocexpression() | expression() )]
		(
		  < COMMA > (
			(< INT > | < STRING > | < CHAR > | < BOOLEAN > | < FLOAT > | < IDENT >) < IDENT >
			(< LBRACKET > < RBRACKET >)* [< ASSIGN > (alocexpression() | expression() )]
		  )
		)*
  ]

  */

VarDeclNode vardecl(RecoverySet g) throws ParseEOFException :
{
  Token t1 = null, t2;
  int k = 0;
  ListNode l = null;
}
{
  try {
	(t1 = < INT > | t1 =  < STRING > | t1 =  < CHAR > | t1 =  < BOOLEAN > | t1 =  < FLOAT > | t1 =  < IDENT >)
	t2 = < IDENT > (< LBRACKET > < RBRACKET > { k++; })*
	{ l = new ListNode(new VarNode(t2, k)); }
	(< COMMA > { k = 0; } t2 = < IDENT > (< LBRACKET > < RBRACKET > { k++; })*
	{ l.add(new VarNode(t2, k)); }
	)*
// 	[< ASSIGN > (alocexpression(g) | expression(g) )]
	{ return new VarDeclNode(t1, l); }
  }
  catch (ParseException e) {
    consumeUntil(g, e, "vardecl");
    return new VarDeclNode(t1, l);
  }
}

void factor() throws ParseEOFException :
{
}
{
  (
    < int_constant > |
    < string_constant > |
    < char_constant > |
    < null_constant > |
    < boolean_constant > |
    < float_constant > |
    lvalue(null) |
    < LPAREN > expression(null) < RPAREN >
  )
}

void unaryexpr() throws ParseEOFException :
{
}
{
  [< NOT >][( < PLUS > | < MINUS >)] factor()
}

void term() throws ParseEOFException :
{
}
{
  unaryexpr() (( < MULTIPLY > | < DIVIDE > | < REM >) unaryexpr())*
}

void numexpr() throws ParseEOFException :
{
}
{
  term() (( < PLUS > | < MINUS >) term())*
}


void equalityExpression() :
{}
{
  numexpr() ( ( < LT > | < GT > | < LE > | < GE > | < EQ > | < NEQ > ) numexpr() )*
}

void condANDexpression():
{
}
{
  equalityExpression() ( (< AND >) equalityExpression() )*
}

void condORexpression():
{
}
{
  condANDexpression() ( (< OR > | < XOR >) condANDexpression() )*
}


void expression(RecoverySet g) throws ParseEOFException :
{
}
{
  try {
    numexpr() [( < LT > | < GT > | < LE > | < GE > | < EQ > | < NEQ >) numexpr()]
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "expression");
  }
}


void alocexpression(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(RPAREN);
  RecoverySet f2 = new RecoverySet(RBRACKET);
}
{
  < NEW > (
	LOOKAHEAD(2) < IDENT > < LPAREN > arglist(f1) < RPAREN > |
	(< INT > | < STRING > | < CHAR > | < BOOLEAN > | < FLOAT > | < IDENT >)
	(< LBRACKET > expression(f2) < RBRACKET >)+
  )
}

void lvalue(RecoverySet g) throws ParseEOFException :
{
}
{
  try { 
  < IDENT > (
    < LBRACKET > expression(null) < RBRACKET > |
    < DOT > <IDENT > [< LPAREN > arglist(null) < RPAREN >]
  )*
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "lvalue");
  }
}


void atribstat(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(ASSIGN);
}
{
  try {
    lvalue(f1) < ASSIGN > (alocexpression(g) | expression(g))
  }
  catch (ParseException e)
  {
	consumeUntil(g, e, "atribstat");
  }
}

void printstat(RecoverySet g) throws ParseEOFException :
{
}
{
  try { 
  	< PRINT > expression(g)
 }
  catch (ParseException e)
  {
	consumeUntil(g, e, "printstat");
  }
}

void readstat(RecoverySet g) throws ParseEOFException :
{
}
{
  try {
  < READ > lvalue(g)
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "readstat");
  }
}

void returnstat(RecoverySet g) throws ParseEOFException :
{
}
{
  try {
  < RETURN > [expression(g)]
  }
  catch(ParseException e)
  {
    consumeUntil(g, e, "returnstat");
  }
    
}

void superstat(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = new RecoverySet(RPAREN);
}
{
  try { 
  	< SUPER > < LPAREN > arglist(f) < RPAREN >
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "superstat");
  }
}

void statement(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(SEMICOLON);
  RecoverySet f2 = new RecoverySet(RBRACE);
}
{
  try {
	LOOKAHEAD(2)
	vardecl(f1) < SEMICOLON >
|
	atribstat(f1) < SEMICOLON >
|
	printstat(f1) < SEMICOLON >
|
	readstat(f1) < SEMICOLON >
|
	returnstat(f1) < SEMICOLON >
|
	superstat(f1) < SEMICOLON >
|
	ifstat(g)
|
	forstat(g)
|
	< LBRACE > statlist(f2) < RBRACE >
|
	< BREAK > < SEMICOLON >
|
	< SEMICOLON >
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "statement");
  }
}

void methodbody(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = new RecoverySet(RPAREN);
}
{
  try {
  	< LPAREN > paramlist(f) < RPAREN > statement(g)
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "methodbody");
  }
}


void methoddecl(RecoverySet g) :
{
}
{
	(< INT > | < STRING > | < CHAR > | < BOOLEAN > | < FLOAT > | < IDENT >)
	(< LBRACKET > < RBRACKET >)*
	< IDENT > methodbody(g)
}

ConstructDeclNode constructdecl(RecoverySet g) throws ParseEOFException:
{
  Token t = null;
  MethodBodyNode m = null;
}
{
  try {
    t = < CONSTRUCTOR > m = methodbody(g)
    { return new ConstructDeclNode(t, m); } 
  }
  catch (ParseEOFException e) {
	consumeUntil(g, e, "constructdecl");
	return new ConstructDeclNode(t, m);
  }
}

void Type():
{
}
{
 (
   < INT > | < BOOLEAN > | < CHAR > | < STRING > | < FLOAT > | < IDENT >
 )
}


void MethodDeclarationLookahead() :
{}
{
  Type() <IDENT> "("
}

ClassBodyNode classbody(RecoverySet g) throws ParseEOFException :
{
  ListNode c = null, v = null, ct = null, m = null, m = null;
  VarDeclNode vd;
  ConstructDeclNode cd;
  MethodDeclNode md;
  Token t = null;
  
  RecoverySet f1 = new RecoverySet(RBRACE),
  f2 = new RecoverySet(SEMICOLON),
  f3 = First.methoddecl.union(f1),
  f4 = First.constructdecl.union(f3),
  f5 = First.vardecl.union(f4);
}
{
  try { 
	t = < LBRACE >
		[c = classlist(f5)]
		(LOOKAHEAD(3) vardecl(f2) < SEMICOLON >
		{ if (v == null) v = new ListNode(vd);
		  else v.add(v);
		}
		)*
		(cd = constructdecl(f4)
		{ if (ct == null) ct = new ListNode(cd);
		  else ct.add(cd);
		}
		)*
		(methoddecl(f3)
		{ if (m == null) m = new ListNode(md);
		  else m.add(md);
		}
		)*
	< RBRACE >
	{ return new ClassBodyNode (t, c, v, ct, m); }
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "classbody");
    return new ClassBodyNode (t, c, v, ct, m);
  }
}

ClassDeclNode classdecl(RecoverySet g) throws ParseEOFException :
{
  Token t1 = null, t2 = null, t3 = null;
  ClassBodyNode c1 = null;
}
{
  try {
    t1 = < CLASS > t2 = < IDENT > [< EXTENDS > t3 =  < IDENT >] c1 = classbody(g)
    { return new ClassDeclNode(t1, t2, t3, t4, c1); }
  }	
  catch (ParseException e) {
    consumeUntil(g, e, "classdecl");
    return new ClassDeclNode(t1, t2, t3, t4, c1);
  }
}


void ifstat(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(RPAREN),
  f2 = new RecoverySet(ELSE).union(g);
}
{
  try { 
  < IF > < LPAREN > expression(f1) < RPAREN > statement(f2)
  [LOOKAHEAD(1) < ELSE > statement(g)]
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "ifstat");
  }
}

void forstat(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(SEMICOLON),
  f2 = new RecoverySet(RPAREN);
}
{
  try { 
  < FOR > < LPAREN > [(atribstat(f1) | vardecl(f1))] < SEMICOLON >
  					 [expression(f1)] < SEMICOLON >
  					 [atribstat(f2)] < RPAREN >
  					 statement(g)
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "forstat");
  }
}

void statlist (RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = First.statlist.union(g);
}
{
  statement(f) [statlist(g)]
}


ListNode classlist(RecoverySet g) throws ParseEOFException :
{
  ClassDeclNode c = null;
  ListNode l = null;
  
  RecoverySet f = First.classlist.union(g);
}
{
  (
  	c = classdecl(f) [ l = classlist(g) ]
  	{ return new ListNode(cm, l);}
  )
}


void arglist(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f = new RecoverySet(COMMA).union(g);
}
{
  [expression(f) (< COMMA > expression(f))*]
}

ListNode program() throws ParseEOFException :
{
//RecoverySet g = new RecoverySet(EOF);
RecoverySet g = First.program;

ListNode l = null, d = null;
}
{
  < EOF >
  | 
  ( l = classlist(g)
  try {
	< EOF > { return l; }
  }
  catch (ParseException e) {
	consumeUntil(g, e, "program");
  }
  [ d = program() ]
  ) { return l; } 
}