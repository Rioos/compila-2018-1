/* Fun.java */
/* Generated By:JavaCC: Do not edit this line. Fun.java */
package parser;
import java.io.*;

public class Fun implements FunConstants {
  final static String Version ="X++ Compiler - version 1.0 - 2018\u005cn";
  boolean menosShort = false;

  public static void main(String args []) throws ParseException {
        String filename ="";
    Fun parser;
    int i;
    boolean ms = false;

        System.out.println(Version);
        // le os parametros passados para o compilador
        for (i = 0; i<args.length - 1; i++) {
          if (args[i].toLowerCase().equals("-short"))
          ms = true;
          else {
            System.out.println("Usase is: java Fun [-short] inputfile");
            System.exit(0);
          }
        }

        if(args[i].equals("-")) {
          // le a entrada - padrao
          System.out.println("Reading standart input...");
          parser = new Fun(System.in);
        }
        else {
          // le o arquivo
          filename = args[args.length-1];
          System.out.println("Reading from file " + filename + "...");
          try {
            parser = new Fun(new java.io.FileInputStream(filename));
          }
          catch (java.io.FileNotFoundException e) {
            System.out.println("File " + filename + " not found.");
            return;
          }
        }

        parser.menosShort = ms;
        parser.program(); //chama o metodo que faz a analise

        // verifica se houve erro lexico
        if (parser.token_source.foundLexError() != 0) {
          System.out.println(parser.token_source.foundLexError() + " lexical errors found");
        }
        else {
          System.out.println("Program successfully analized");
        } // main
}
  public static String im (int x) {
    int k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\u005c"");
    try { s = s.substring(1,k); }
    catch (StringIndexOutOfBoundsException e)
    { }
    return s;
  }

  final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:
      case CONSTRUCTOR:
      case ELSE:
      case EXTENDS:
      case FOR:
      case IF:
      case INT:
      case NEW:
      case PRINT:
      case READ:
      case RETURN:
      case STRING:
      case SUPER:
      case FLOAT:
      case CHAR:
      case BOOLEAN:
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case XOR:
      case LPAREN:
      case RPAREN:
      case LBRACE:
      case RBRACE:
      case LBRACKET:
      case RBRACKET:
      case SEMICOLON:
      case COMMA:
      case DOT:
      case int_constant:
      case string_constant:
      case float_constant:
      case boolean_constant:
      case null_constant:
      case char_constant:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
System.out.println("Reconheceu PLUS");
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
System.out.println("Reconheceu MINUS");
        break;
        }
      case XOR:{
        jj_consume_token(XOR);
System.out.println("Reconheceu XOR");
        break;
        }
      case MULTIPLY:{
        jj_consume_token(MULTIPLY);
System.out.println("Reconheceu MULTIPLY");
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
System.out.println("Reconheceu STRING");
        break;
        }
      case CLASS:{
        jj_consume_token(CLASS);
System.out.println("Reconheceu CLASS");
        break;
        }
      case CONSTRUCTOR:{
        jj_consume_token(CONSTRUCTOR);
System.out.println("Reconheceu CONSTRUCTOR");
        break;
        }
      case ELSE:{
        jj_consume_token(ELSE);
System.out.println("Reconheceu ELSE");
        break;
        }
      case EXTENDS:{
        jj_consume_token(EXTENDS);
System.out.println("Reconheceu EXTENDS");
        break;
        }
      case FOR:{
        jj_consume_token(FOR);
System.out.println("Reconheceu FOR");
        break;
        }
      case IF:{
        jj_consume_token(IF);
System.out.println("Reconheceu IF");
        break;
        }
      case INT:{
        jj_consume_token(INT);
System.out.println("Reconheceu INT");
        break;
        }
      case NEW:{
        jj_consume_token(NEW);
System.out.println("Reconheceu NEW");
        break;
        }
      case PRINT:{
        jj_consume_token(PRINT);
System.out.println("Reconheceu PRINT");
        break;
        }
      case READ:{
        jj_consume_token(READ);
System.out.println("Reconheceu RED");
        break;
        }
      case RETURN:{
        jj_consume_token(RETURN);
System.out.println("Reconheceu RETURN");
        break;
        }
      case SUPER:{
        jj_consume_token(SUPER);
System.out.println("Reconheceu SUPER");
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
System.out.println("Reconheceu FLOAT");
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
System.out.println("Reconheceu CHAR");
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
System.out.println("Reconheceu BOOLEAN");
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
System.out.println("Reconheceu LPAREN");
        break;
        }
      case RPAREN:{
        jj_consume_token(RPAREN);
System.out.println("Reconheceu RPAREN");
        break;
        }
      case LBRACE:{
        jj_consume_token(LBRACE);
System.out.println("Reconheceu LBRACE");
        break;
        }
      case RBRACE:{
        jj_consume_token(RBRACE);
System.out.println("Reconheceu RBRACE");
        break;
        }
      case LBRACKET:{
        jj_consume_token(LBRACKET);
System.out.println("Reconheceu LBRACKET");
        break;
        }
      case RBRACKET:{
        jj_consume_token(RBRACKET);
System.out.println("Reconheceu RBRACKET");
        break;
        }
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
System.out.println("Reconheceu SEMICOLON");
        break;
        }
      case COMMA:{
        jj_consume_token(COMMA);
System.out.println("Reconheceu COMMA");
        break;
        }
      case DOT:{
        jj_consume_token(DOT);
System.out.println("Reconheceu DOT");
        break;
        }
      case int_constant:{
        jj_consume_token(int_constant);
System.out.println("Reconheceu INT_CONSTANT");
        break;
        }
      case char_constant:{
        jj_consume_token(char_constant);
System.out.println("Reconheceu CHAR_CONSTANT");
        break;
        }
      case string_constant:{
        jj_consume_token(string_constant);
System.out.println("Reconheceu STRING_CONSTANT");
        break;
        }
      case null_constant:{
        jj_consume_token(null_constant);
System.out.println("Reconheceu NULL_CONSTANT");
        break;
        }
      case float_constant:{
        jj_consume_token(float_constant);
System.out.println("Reconheceu FLOAT_CONSTANT");
        break;
        }
      case boolean_constant:{
        jj_consume_token(boolean_constant);
System.out.println("Reconheceu BOOLEAN_CONSTANT");
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /** Generated Token Manager. */
  public FunTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3ffff80,0x3ffff80,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3fffa0,0x3fffa0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Fun(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Fun(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FunTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Fun(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FunTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Fun(FunTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FunTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[66];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
