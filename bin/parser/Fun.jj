/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Fun)
package parser;
import java.io.*;
import recovery.*;			

public class Fun {
  final static String Version ="X++ Compiler - version 1.0 - 2018\n";
  int contParseError = 0;
  boolean debug_recovery;
  
  public static void main(String args []) throws ParseException {
    boolean debug_as = false;
    boolean debug_recovery = false;
    
	String filename ="";
    Fun parser;
    int i;
    
	System.out.println(Version);
	// le os parametros passados para o compilador
	for (i = 0; i<args.length - 1; i++)
	{
	  if (args[i].equals("-debug_AS")) 
	  	debug_as = true;
	  else
	  if (args[i].equals("-debug_recovery"))
	    debug_recovery = true;
	  else
	  {
	    System.out.println("Usage is: java Fun [-debug_AS] " + "[-debug_recovery] inputfile");
	    System.exit(0);
	  }
	}
	  
	
	if(args[i].equals("-")) {
	  // le a entrada - padrao
	  System.out.println("Reading standart input...");
	  parser = new Fun(System.in);
	}
	else {
	  // le do arquivo
	  filename = args[args.length-1];
	  System.out.println("Reading from file " + filename + "...");
	  try {
	    parser = new Fun(new java.io.FileInputStream(filename));
	  }
	  catch (java.io.FileNotFoundException e) {
	    System.out.println("File " + filename + " not found.");
	    return;
	  }
	}
	

	parser.debug_recovery = debug_recovery;
	if (!debug_as) parser.disable_tracing(); // desab verbose do AS
	try {
		parser.program(); //chama o metodo que faz a analise
	}
	catch (ParseEOFException e) {
	  System.err.println(e.getMessage());
	}
	finally {
	   System.out.println(parser.token_source.foundLexError() + "Lexical errors found");
	   System.out.println(parser.contParseError + " Syntatic errors found");
	 }
}

	// verifica se houve erro lexico
	if (parser.token_source.foundLexError() != 0) {
	  System.out.println(parser.token_source.foundLexError() + " lexical errors found");
	}
	else {
	  System.out.println("Program successfully analized");
	} // main
}
  public static String im (int x) {
    int k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try { s = s.substring(1,k); }
    catch (StringIndexOutOfBoundsException e)
    { }
    return s;
  }
}

PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
  int countLexError = 0;

  public int foundLexError() {
    return countLexError;
  }
}


SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

TOKEN : /* Palavra$ reservadas */
{
 < BREAK: "break">
| < CLASS: "class">
| < CONSTRUCTOR: "constructor">
| < ELSE: "else" >
| < EXTENDS: "extends">
| < FOR: "for" >
| < IF: "if" >
| < INT: "int" >
| < NEW: "new" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < STRING: "string" >
| < SUPER: "super" >
| < FLOAT: "float" >
| < CHAR: "char" >
| < BOOLEAN: "boolean" >

}

TOKEN : /* Operadore$ */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < REM: "%" >
| < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NEQ: "!=" >
| < NOT: "not" >
| < AND: "and" >
| < XOR: "xor" >
| < OR: "or" >

}

TOKEN : /* $imbolos especiais */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* Contante$ */
{
	< int_constant:( // numeros decimais, octais, hexa ou binarios
		(["0"-"9"] (["0"-"9"])* ) |
		(["0"-"7"] (["0"-"7"])* ["o", "O"]) |
		(["0"-"9"] (["0"-"7","A"-"F", "a"-"f"])* ["h", "H"]) |
		(["0"-"1"] (["0"-"1"])* ["b", "B"])
		) >
|
	< string_constant: //qlqr constante string 
	"\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    | "\\" [ "n", "t", "r", "\\", "\"" ]
    )*
    "\"" >
|
	< char_constant:
	"\'"
    (
      (~["\\", "\n", "\r", "\'" ])
    | "\\" [ "n", "t", "r", "\\", "\"", "\'" ]
    )
    "\'" >
|
	< float_constant:( // numeros de ponto flutuante
	(["-"])? (["0"-"9"])+ ["."] (["0"-"9"])+
	) >
|	
	< boolean_constant: "true" | "false" > // constante boolean
|
	< null_constant: "null" > // constante nula


}

TOKEN: /* identificadore$ */
{
  < IDENT: < LETTER > (< LETTER >|< DIGIT >)* >
| 
  < #LETTER:["A"-"Z","a"-"z"] >
|
  < #DIGIT:["0"-"9"] >

}


SKIP:
{
  "/*": multilinecomment
}
<multilinecomment> SKIP:
{
 	 "*/": DEFAULT
	|  <~[]>
}


SKIP:
{
  "//": singlelinecommnet
}
<singlelinecommnet> SKIP:
{
  < ["\n","\r"] >: DEFAULT
|  <~[]>
}

SPECIAL_TOKEN:
{
< INVALID_LEXICAL:
(~ ["a"-"z", "A"-"Z",
	"0"-"9",
	"\"",
	"\'",
	"(",
	")",
	"[",
	"]",
	"{",
	"}",
	";",
	",",
	".",
	"=",
	">",
	"<",
	"!",
	"+",
	"-",
	"*",
	"/",
	"%",
	" ",
	"\t",
	"\n",
	"\r",
	"\f"
])+>
	{
	  System.err.println("Line " + input_stream.getEndLine() + " - Invalid string found: " + image);
	  countLexError++;
	}
|
	< INVALID_CHAR_CONST:
	"\'"
    (
      (~[ "\'", "\\", "\n", "\r" ])
    | "\\" [ "n", "t", "r", "\\", "\'" ]
    )*
     ["\n","\r"] >
	{
	  System.err.println("Line " + input_stream.getEndLine() + " - Char constant has a : " + image);
	  countLexError++;
	}
|
	< INVALID_STRING_CONST:
	"\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    | "\\" [ "n", "t", "r", "\\", "\"" ]
    )*
     ["\n","\r"] >
	{
	  System.err.println("Line " + input_stream.getEndLine() + " - String constant has a : " + image);
	  countLexError++;
	}

}


void paramlist() :
{
}
{
  [
		(< INT > | < STRING > | < CHAR > | < BOOLEAN > | < FLOAT > | < IDENT >) < IDENT >
		(< LBRACKET > < RBRACKET >)* [< ASSIGN > (alocexpression() | expression() )]
		(
		  < COMMA > (
			(< INT > | < STRING > | < CHAR > | < BOOLEAN > | < FLOAT > | < IDENT >) < IDENT >
			(< LBRACKET > < RBRACKET >)* [< ASSIGN > (alocexpression() | expression() )]
		  )
		)*
  ]
}

void vardecl() :
{
}
{
	(< INT > | < STRING > | < CHAR > | < BOOLEAN > | < FLOAT > | < IDENT >)
	< IDENT > (< LBRACKET > < RBRACKET >)*
	(< COMMA > < IDENT > (< LBRACKET > < RBRACKET >)*)*
	[< ASSIGN > (alocexpression() | expression() )]
	  
}

void factor():
{
}
{
  (
    < int_constant > |
    < string_constant > |
    < char_constant > |
    < null_constant > |
    < boolean_constant > |
    < float_constant > |
    lvalue() |
    < LPAREN > expression() < RPAREN >
  )
}

void unaryexpr():
{
}
{
  [< NOT >][( < PLUS > | < MINUS >)] factor()
}

void term():
{
}
{
  unaryexpr() (( < MULTIPLY > | < DIVIDE > | < REM >) unaryexpr())*
}

void numexpr():
{
}
{
  term() (( < PLUS > | < MINUS >) term())*
}


void equalityExpression() :
{}
{
  numexpr() ( ( < LT > | < GT > | < LE > | < GE > | < EQ > | < NEQ > ) numexpr() )*
}

void condANDexpression():
{
}
{
  equalityExpression() ( (< AND >) equalityExpression() )*
}

void condORexpression():
{
}
{
  condANDexpression() ( (< OR > | < XOR >) condANDexpression() )*
}


void expression():
{
}
{
  condORexpression()
}


void alocexpression() :
{
}
{
  < NEW > (
	LOOKAHEAD(2) < IDENT > < LPAREN > arglist() < RPAREN > |
	(< INT > | < STRING > | < CHAR > | < BOOLEAN > | < FLOAT > | < IDENT >)
	(< RBRACKET > expression() < LBRACKET >)+
  )
}

void lvalue() :
{
}
{
  < IDENT > (
    < LBRACKET > expression() < RBRACKET > |
    < DOT > <IDENT > [< LPAREN > arglist() < RPAREN >]
  )*
}


void atribstat() :
{
}
{
  lvalue() < ASSIGN > (alocexpression() | expression() )
}


void printstat() :
{
}
{
  < PRINT > expression()
}

void readstat() :
{
}
{
  < READ > lvalue()
}

void returnstat() :
{
}
{
  < RETURN > [expression()]
}

void superstat() :
{
}
{
  < SUPER > < LPAREN > arglist() < RPAREN >
}

void statement() :
{
}
{
	LOOKAHEAD(2)
	vardecl() |
	printstat() < SEMICOLON > |
	atribstat() < SEMICOLON > |
	readstat() < SEMICOLON > |
	returnstat() < SEMICOLON > |
	superstat() < SEMICOLON > |
	ifstat() |
	forstat() |
	< LBRACE > statlist() < RBRACE > |
	< BREAK > < SEMICOLON > |
	< SEMICOLON >
}

void methodbody() :
{
}
{
  < LPAREN > paramlist() < RPAREN > statement()
}


void methoddecl() :
{
}
{
	(< INT > | < STRING > | < CHAR > | < BOOLEAN > | < FLOAT > | < IDENT >)
	(< LBRACKET > < RBRACKET >)*
	< IDENT > methodbody()
}

void constructdecl() :
{
}
{
  < CONSTRUCTOR > methodbody()
}

void Type():
{
}
{
 (   < INT > | < BOOLEAN > | < CHAR > | < STRING > | < FLOAT > | < IDENT >
 )
}


void MethodDeclarationLookahead() :
{}
{
  Type() <IDENT> "("
}

void classbody() :
{
}
{	  	< LBRACE >
		(LOOKAHEAD( < CLASS >) classlist())*
		(LOOKAHEAD(3) vardecl() < SEMICOLON >)*
	(
		LOOKAHEAD(MethodDeclarationLookahead()) methoddecl() |
		LOOKAHEAD( < CONSTRUCTOR >) constructdecl()
	)*
	< RBRACE >
}

void classdecl() :
{
}
{
  < CLASS > < IDENT > [< EXTENDS > < IDENT >] classbody()
}


void ifstat() :
{
}
{
  < IF > < LPAREN > expression() < RPAREN > statement()
  [LOOKAHEAD(1) < ELSE > statement()]
}

void forstat() :
{
}
{
  < FOR > < LPAREN > [(atribstat() | vardecl())] < SEMICOLON >
  					 [expression()] < SEMICOLON >
  					 [atribstat()] < RPAREN >
  					 statement()
}

void statlist() :
{
}
{
  statement() [statlist()]
}


void classlist():
{
}
{
  classdecl() [classlist()]
}


void arglist():
{
}
{
  [expression() (< COMMA > expression())*]
}

void program() :
{}
{
	classdecl() [classlist()]
}

void S() {
  if (curToken.type == 'a') { 
	analex();
	A('c');
	if (curToken.type == 'c') {
	   analex();
	   if (curToken.type == 'd') {
	     analex();
	   }
	   else 
	   SintaticError("Encontado curToken.type() + esperado: d");
	}
	else 
	  SintaticError("Encontado + curToken.type() + esperado: c");
  }
  else
  	if (curToken.type == 'b') { 
		analex();
		A('e');
		if (curToken.type == 'e') {
		  analex();
		  if (curToken.type == 'f') {
		    analex();
		  }
		    else
		    	SintaticError("Encontado : " + curToken.type() + " esperado: f"); 
		}
		else
			SintaticError("Encontado: " + curToken.type() + " esperado: e");
	}
	else
		SintaticError("Encontado: " + curToken.type() + " esperado: b"); 
} 


void A(int k) {
  try {
    if (curToken.type == 'g') { 
		analex();
		if (curToken.type == 'h') { 
			analex();
		}
		else { 
			SintaticError("Encontrado " + curToken.type + " esperado: h");
		} 
 	}
 	else { 
  		SintaticError("Encontado " + curToken.type() + "esperado: g");
  	}
  }
  catch (ASException e) { 
		System.err.println(e.getMessage());
		consume_until(k);
	}
}

void SintaticError(String s) { 
  throw new ASException(s);
}
 
void consume_until(int t) { 
	while (curToken.type != t)
		analex();
}
