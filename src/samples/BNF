
<program> → [ <classlist> ]

<classlist> → [ <classdecl> ]+

<classdecl> → "class" "ident" [ "extends" "ident" ] <classbody>


<classbody> → "{"
    [ <classlist> ] (<vardecl> ";")*
    (<constructordecl>)*
    (<methoddecl>)*
    "}"


<vardecl> → ( "int" | "string" | "ident"| "float"| "boolean"| "char" ) "ident" ( "[" "]" )*
            ("," "ident" ("[" "]")* )*    

<constructdecl> → "constructor" <methodbody>

<methoddecl> → ( "int" | "string" | "ident"| "float"| "boolean"| "char" )  ( "[" "]" )* "ident" <methodbody>

<methodbody> → "("<paramlist>)")" <statement>

<paramlist> → [( "int" | "string" | "ident"| "float"| "boolean"| "char" ) "ident" ( "[" "]" )* ["=" ( <expression> | <alocexpression> )] (","
              ( "int" | "string" | "ident"| "float"| "boolean"| "char" ) "ident" ( "[" "]" )* ["=" ( <expression> | <alocexpression> )])* ]

<statement> → (
                <vardecl> ";" |
                <atribstat> ";" |
                <printstat> ";" |
                <readstat> ";" |
                <returnstat> ";" |
                <superstat> ";" |
                <ifstat> |
                <forstat> |
                "{" <statlist>  "}" |
                break "" |
                ";" 
              )

<atribstat> → <lvalue> "=" ( <expression> | <alocexpression> )

<printstat> → "print" <expression>

<readstat> → "read" <lvalue>

<returnstat> → "return" [ <expression> ]

<superstat> → "super" "(" <arglist> ")"

<ifstat> → "if" "(" <expression> ")" <statement>
[ "else" <statement> ]

<forstat> → "for" "(" [ <atribstat> ] ";" [ <expression> ] ";"[ <atribstat> ] ")" <statement>

<statlist> → <statement> [<statlist>]

<lvalue> → "ident" ( "[" <expression> "]" | "." "ident" [ "(" <arglist> ")" ] )

<alocexpression> → "new" ( "ident" "(" <arglist> ")" |
                    ( "int" | "string" | "ident"| "float"| "boolean"| "char" )
                    ( "[" <expression "]" )+ )

<expression> → <numexpr>
               [ ( "<" | ">" | "<=" | ">="| "==" | "!=" ) <numexpr> ]
               [ ( "and" | "xor"  | "not" | "or") <expression> ]

<numexpr> → <term> ( ( "+" | "-" ) <term> )*

<term> → <unaryexpr> ( ( "*" | "/" | "%" ) <unaryexpr> )*

<unaryexpr> → [ ( "+" | "-" ) ] <factor>

<factor> → ( "int-constant" | "string-constant" | "char-constant" | "null" | <lvalue> | "(" <expression> ")" )

<arglist> → [ <expression> ( "," <expression )* ]
