/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
}

PARSER_BEGIN(Fun)
package parser;
import java.io.*;				

public class Fun {
  final static String Version ="X++ Compiler - version 1.0 - 2018\n";
  boolean menosShort = false;
  
  public static void main(String args []) throws ParseException {
	String filename ="";
    Fun parser;
    int i;
    boolean ms = false;
    
	System.out.println(Version);
	// le os parametros passados para o compilador
	for (i = 0; i<args.length - 1; i++) {
	  if (args[i].toLowerCase().equals("-short")) 
	  ms = true;
	  else {
	    System.out.println("Usase is: java Fun [-short] inputfile");
	    System.exit(0);
	  }
	}
	
	if(args[i].equals("-")) {
	  // le a entrada - padrao
	  System.out.println("Reading standart input...");
	  parser = new Fun(System.in);
	}
	else {
	  // le o arquivo
	  filename = args[args.length-1];
	  System.out.println("Reading from file " + filename + "...");
	  try {
	    parser = new Fun(new java.io.FileInputStream(filename));
	  }
	  catch (java.io.FileNotFoundException e) {
	    System.out.println("File " + filename + " not found.");
	    return;
	  }
	}

	parser.menosShort = ms;
	parser.program(); //chama o metodo que faz a analise

	// verifica se houve erro lexico
	if (parser.token_source.foundLexError() != 0) {
	  System.out.println(parser.token_source.foundLexError() + " lexical errors found");
	}
	else {
	  System.out.println("Program successfully analized");
	} // main
}
  public static String im (int x) {
    int k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try { s = s.substring(1,k); }
    catch (StringIndexOutOfBoundsException e)
    { }
    return s;
  }
}

PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
  int countLexError = 0;

  public int foundLexError() {
    return countLexError;
  }
}


SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

TOKEN : /* Palavra$ reservadas */
{
 < BREAK: "break">
| < CLASS: "class">
| < CONSTRUCTOR: "constructor">
| < ELSE: "else" >
| < EXTENDS: "extends">
| < FOR: "for" >
| < IF: "if" >
| < INT: "int" >
| < NEW: "new" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < STRING: "string" >
| < SUPER: "super" >
| < FLOAT: "float" >
| < CHAR: "char" >
| < BOOLEAN: "boolean" >

}

TOKEN : /* Operadore$ */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < REM: "%" >
| < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NEQ: "!=" >
| < NOT: "not" >
| < AND: "and" >
| < XOR: "xor" >
| < OR: "or" >

}

TOKEN : /* $imbolos especiais */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* Contante$ */
{
	< int_constant:( // numeros decimais, octais, hexa ou binarios
		(["0"-"9"] (["0"-"9"])* ) |
		(["0"-"7"] (["0"-"7"])* ["o", "O"]) |
		(["0"-"9"] (["0"-"7","A"-"F", "a"-"f"])* ["h", "H"]) |
		(["0"-"1"] (["0"-"1"])* ["b", "B"])
		) >
|
	< string_constant: //qlqr constante string 
	"\""( ~["\"","\n","\r"])* "\"" >
|
	< float_constant:( // numeros de ponto flutuante
	(["-"])? ["0"-"9"] (["0"-"9"])* ["."] (["0"-"9"])*
	) >
|	
	< boolean_constant: "true" | "false" > // constante boolean
|
	< null_constant: "null" > // constante nula
|
	< char_constant: "\'"( ~["\"","\n","\r"]) "\'" > // constante char

}

TOKEN: /* identificadore$ */
{
  < IDENT: < LETTER > (< LETTER >|< DIGIT >)* >
| 
  < #LETTER:["A"-"Z","a"-"z"] >
|
  < #DIGIT:["0"-"9"] >

}


SKIP:
{
  "/*": multilinecomment
}
<multilinecomment> SKIP:
{
 	 "*/": DEFAULT
	|  <~[]>
}


SKIP:
{
  "//": singlelinecommnet
}
<singlelinecommnet> SKIP:
{
  < ["\n","\r"] >: DEFAULT
|  <~[]>
}

SPECIAL_TOKEN:
{
< INVALID_LEXICAL:
(~ ["a"-"z", "A"-"Z",
	"0"-"9",
	"\"",
	"\'",
	"(",
	")",
	"[",
	"]",
	"{",
	"}",
	";",
	",",
	".",
	"=",
	">",
	"<",
	"!",
	"+",
	"-",
	"*",
	"/",
	"%",
	" ",
	"\t",
	"\n",
	"\r",
	"\f"
])+>
	{
	  System.err.println("Line " + input_stream.getEndLine() + " - Invalid string found: " + image);
	  countLexError++;
	}
|
	< INVALID_STRING_CONST:
	"\"" (~ ["\n","\r","\""])* ["\n","\r"] >
	{
	  System.err.println("Line " + input_stream.getEndLine() + " - String constant has a \\n: " + image);
	  countLexError++;
	}
|
	< INVALID_CHAR_CONST:
	"\'" (~ ["\n","\r","\'"])* ["\n","\r"] >
	{
	  System.err.println("Line " + input_stream.getEndLine() + " - Char constant has a \\n: " + image);
	  countLexError++;
	}
}

	
void program() :
{}
{
  (
  <PLUS> { System.out.println("Reconheceu PLUS"); } 
| <MINUS> { System.out.println("Reconheceu MINUS"); }
| <XOR> { System.out.println("Reconheceu XOR"); } 
| <MULTIPLY> { System.out.println("Reconheceu MULTIPLY"); } 
| <STRING> { System.out.println("Reconheceu STRING"); }
| <CLASS> { System.out.println("Reconheceu CLASS"); }
| <CONSTRUCTOR> { System.out.println("Reconheceu CONSTRUCTOR"); }
| <ELSE> { System.out.println("Reconheceu ELSE"); }
| <EXTENDS> { System.out.println("Reconheceu EXTENDS"); }
| <FOR> { System.out.println("Reconheceu FOR"); }
| <IF> { System.out.println("Reconheceu IF"); }
| <INT> { System.out.println("Reconheceu INT"); }
| <NEW> { System.out.println("Reconheceu NEW"); }
| <PRINT> { System.out.println("Reconheceu PRINT"); }
| <READ> { System.out.println("Reconheceu RED"); }
| <RETURN> { System.out.println("Reconheceu RETURN"); }
| <SUPER> { System.out.println("Reconheceu SUPER"); }
| <FLOAT> { System.out.println("Reconheceu FLOAT"); }
| <CHAR> { System.out.println("Reconheceu CHAR"); }
| <BOOLEAN> { System.out.println("Reconheceu BOOLEAN"); }
| <LPAREN> { System.out.println("Reconheceu LPAREN"); }
| <RPAREN> { System.out.println("Reconheceu RPAREN"); }
| <LBRACE> { System.out.println("Reconheceu LBRACE"); }
| <RBRACE> { System.out.println("Reconheceu RBRACE"); }
| <LBRACKET> { System.out.println("Reconheceu LBRACKET"); }
| <RBRACKET> { System.out.println("Reconheceu RBRACKET"); }
| <SEMICOLON> { System.out.println("Reconheceu SEMICOLON"); }
| <COMMA> { System.out.println("Reconheceu COMMA"); }
| <DOT> { System.out.println("Reconheceu DOT"); }
| <int_constant> { System.out.println("Reconheceu INT_CONSTANT"); }
| <char_constant> { System.out.println("Reconheceu CHAR_CONSTANT"); }
| <string_constant> { System.out.println("Reconheceu STRING_CONSTANT"); }
| <null_constant> { System.out.println("Reconheceu NULL_CONSTANT"); }
| <float_constant> { System.out.println("Reconheceu FLOAT_CONSTANT"); }
| <boolean_constant> { System.out.println("Reconheceu BOOLEAN_CONSTANT"); }
| <IDENT> { System.out.println("Reconheceu IDENT"); }
| <DIVIDE> { System.out.println("Reconheceu DIVIDE"); }
| <REM> { System.out.println("Reconheceu REM"); }
| <ASSIGN> { System.out.println("Reconheceu ASSIGN"); }
| <GT> { System.out.println("Reconheceu GT"); }
| <LT> { System.out.println("Reconheceu LT"); }
| <EQ> { System.out.println("Reconheceu EQ"); }
| <LE> { System.out.println("Reconheceu LE"); }
| <GE> { System.out.println("Reconheceu GE"); }
| <NEQ> { System.out.println("Reconheceu NEQ"); }
| <NOT> { System.out.println("Reconheceu NOT"); }
| <AND> { System.out.println("Reconheceu AND"); }
| <OR> { System.out.println("Reconheceu OR"); }
 )*
}
